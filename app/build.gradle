apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def CREDENTIALS_DEBUG = '../keystore/credentials-debug.properties'
def CREDENTIALS_RELEASE = '../keystore/credentials-release.properties'

def STORE_FILE = 'keystore.file'
def STORE_PASSWORD = 'keystore.password'
def KEY_ALIAS = 'key.alias'
def KEY_PASSWORD = 'key.password'

def GLOBAL_CONFIGURATION_PROPERTIES = "../configuration.properties"
def GLOBAL_CONFIGURATION_APPLICATION_ID = "application.id"

buildscript {
    repositories {
        jcenter()
    }
}

android {

    def globalConfigProperties = new Properties()
    file(GLOBAL_CONFIGURATION_PROPERTIES).withInputStream {
        globalConfigProperties.load(it)
    }

    def androidConfigurationVersion = rootProject.ext.androidVersions

    compileSdkVersion androidConfigurationVersion.androidCompileSdkVersion
    buildToolsVersion androidConfigurationVersion.androidBuildToolsVersion

    defaultConfig {
        applicationId globalConfigProperties[GLOBAL_CONFIGURATION_APPLICATION_ID]
        minSdkVersion androidConfigurationVersion.androidMinSdkVersion
        targetSdkVersion androidConfigurationVersion.androidTargetSdkVersion

        versionCode rootProject.ext.applicationVersionCode
        versionName rootProject.ext.applicationVersionName

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        def credentialsDebug = new Properties()
        file(CREDENTIALS_DEBUG).withInputStream {
            credentialsDebug.load(it)
        }

        debug {
            storeFile file(credentialsDebug[STORE_FILE])
            storePassword credentialsDebug[STORE_PASSWORD]
            keyAlias credentialsDebug[KEY_ALIAS]
            keyPassword credentialsDebug[KEY_PASSWORD]
        }

        release {
            def credentialsRelease = new Properties()
            def credentialsReleaseFile = file(CREDENTIALS_RELEASE)
            if (credentialsReleaseFile.exists()) {
                credentialsReleaseFile.withInputStream { credentialsRelease.load(it) }
                println("credentials-release.properties is exist")
            } else {
                println("credentials-release.properties isn't exist - credentials-debug.properties will be used")
                credentialsRelease = credentialsDebug
            }

            storeFile file(credentialsRelease[STORE_FILE])
            storePassword credentialsRelease[STORE_PASSWORD]
            keyAlias credentialsRelease[KEY_ALIAS]
            keyPassword credentialsRelease[KEY_PASSWORD]
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "IS_LOG_ENABLED", "true"
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
        disable 'OldTargetApi'
    }

}

kapt {
    correctErrorTypes = true
}

androidExtensions {
    experimental = true
}

dependencies {
    def commonDependencies = rootProject.ext.commonDependencies

    implementation project(':common')

    api project(':data')
    api project(':presentation')

    implementation commonDependencies.libs
    implementation commonDependencies.appCore

    implementation commonDependencies.annotations
    implementation commonDependencies.appCompat
    implementation commonDependencies.recyclerView
    implementation commonDependencies.vectorDrawable
    implementation commonDependencies.constraint
    implementation commonDependencies.multiDex

    implementation commonDependencies.rxKotlin
    implementation commonDependencies.rxAndroid
    implementation commonDependencies.rxPm
    implementation commonDependencies.rxBinding
    implementation commonDependencies.rxNetwork

    implementation commonDependencies.javaxAnnotation
    implementation commonDependencies.javaxInject

    implementation commonDependencies.cicerone

    // Dagger2
    kapt commonDependencies.daggerCompiler
    kapt commonDependencies.daggerAndroidProcessor
    implementation commonDependencies.dagger
    implementation commonDependencies.daggerAndroid
    implementation commonDependencies.daggerAndroidSupport

    implementation commonDependencies.glide
    kapt commonDependencies.glideProcessor

    implementation commonDependencies.retrofit
    implementation commonDependencies.retrofitConverter
    implementation commonDependencies.retrofitAdapter
    implementation commonDependencies.okHttp
    implementation commonDependencies.okHttpLogger
    implementation commonDependencies.gson

    implementation commonDependencies.material
}
